syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/httpbody.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package animeshon.image.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/image/v1alpha1;image";
option java_package = "com.animeshon.image.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Image::v1Alpha1";

service Image {
  option (google.api.default_host) = "image.animeapis.com";

  // Uploads an image through the request HttpBody.
  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=galleries/*}/images:upload"
      body: "*"
    };
  }

  // Imports an image from a remote web address.
  rpc ImportImage(ImportImageRequest) returns (ImportImageResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=galleries/*}/images:import"
      body: "*"
    };
  }

  // Gets an image in binary representation with the format and size requested.
  rpc GetImage(GetImageRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=galleries/*/images/*}"
    };
  }

  // Creates a new image gallery.
  rpc CreateGallery(CreateGalleryRequest) returns (Gallery) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/galleries"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{parent=organizations/*}/galleries"
        body: "*"
      }
    };
  }

  // Deletes an existing image gallery.
  rpc DeleteGallery(DeleteGalleryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*/galleries/*}"
      additional_bindings {
        delete: "/v1alpha1/{name=organizations/*/galleries/*}"
      }
    };
  }
}

// The image router is used to generate public links that can be routed through
// the Animeshon CDN (Content Delivery Network) to guarantee high performance
// and availability worldwide.
service ImageRouter {
  option (google.api.default_host) = "image.animeapis.com";
  
  // Gets the image public link address that is used to fetch images via CDN.
  rpc GetImageRoute(GetImageRouteRequest) returns (GetImageRouteResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/galleries/*}:route"
    };
  }

  // Routes a raw request received by a CDN host to its target image.
  rpc RouteImage(RouteImageRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/v1alpha1/{get=routers/*/parameters/**}"
    };
  }
}

message Gallery {
  // The gallery resource name.
  string name = 1;
}

message UploadImageRequest {
  // The image content, represented as an HttpBody.
  google.api.HttpBody body = 1 [(google.api.field_behavior) = REQUIRED];

  // The image parent of the image. This value defaults to the user performing
  // the upload operation if no parent is set.
  string parent = 2 [(google.api.field_behavior) = REQUIRED];
}

message UploadImageResponse {
  // The image resource name.
  string name = 1;
}

message ImportImageRequest {
  // The WebCache options to be used when importing an image from a public
  // website address.
  message WebCacheOptions {
    // If refresh is set to true the image is imported from the remote address
    // regardless of an existing local cache, if the fetched image does not
    // match the existing cache the new image is stored and a new resource is
    // created, otherwise the existing (cached) resource is returned.
    bool refresh = 1;
  
    // If ignore is set to true no cache lookup is performed and the image is
    // imported into a new resource. If both "ignore" and "refresh" are set to
    // true then "refresh" has no effect.
    bool ignore = 2;
  }

  // The image parent of the image. This value defaults to the user performing
  // the import operation if no parent is set.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];
  
  // A publicly-accessible image HTTP/HTTPS URL. When fetching images from
  // HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
  // completed. Your request may fail if the specified host denies the
  // request (e.g. due to request throttling or DoS prevention), or if
  // Animeshon throttles requests to the site for abuse prevention. You should
  // not depend on externally-hosted images for production applications.
  string uri = 2 [(google.api.field_behavior) = REQUIRED];

  // The web cache options to apply to the import request.
  WebCacheOptions cache_options = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ImportImageResponse {
  // The image resource name.
  string name = 1;
}

message GetImageRequest {
  // The image resize bounds.
  message ResizeBounds {
    // The image width.
    int32 width = 1;
  
    // The image height.
    int32 height = 2;
  }

  // The image resource name.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  
  // If content type is set and differs from the original content type the image
  // will be converted to match the specified content type.
  //
  // Note: only "image/png", "image/webp", "image/jpeg" are supported values.
  string content_type = 2 [(google.api.field_behavior) = OPTIONAL];

  // The image bounding box to use for resizing. This value is normally used
  // to request image thumbnails. If both width and height are defined then the
  // value with smaller ratio will be used to resize the image. The resized
  // image has the closest standard ratio to the requested width or height.
  // If the requested ratio is larger than the original image it is ignored.
  ResizeBounds resize = 3 [(google.api.field_behavior) = OPTIONAL];
}

message CreateGalleryRequest {
  string parent = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteGalleryRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetImageRouteRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetImageRouteResponse {
  // A routable url that points to a link address backed by the CDN.
  string url = 1;
}

message RouteImageRequest {
  // An opaque route indicating which host received the request and which
  // parameters were passed to the request.
  string get = 1 [(google.api.field_behavior) = REQUIRED];
}
