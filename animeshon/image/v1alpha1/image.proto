syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/httpbody.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package animeshon.image.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/image/v1alpha1;image";
option java_package = "com.animeshon.image.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Image::v1Alpha1";

service Image {
  option (google.api.default_host) = "image.animeapis.com";

  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=galleries/*}/images:upload"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{parent=users/*}/images:upload"
        body: "*"
      }
      additional_bindings {
        post: "/v1alpha1/{parent=organizations/*}/images:upload"
        body: "*"
      }
    };
  }

  rpc ImportImage(ImportImageRequest) returns (ImportImageResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=galleries/*}/images:import"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{parent=users/*}/images:import"
        body: "*"
      }
      additional_bindings {
        post: "/v1alpha1/{parent=organizations/*}/images:import"
        body: "*"
      }
    };
  }

  rpc GetImage(GetImageRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=galleries/*/images/*}"
      additional_bindings {
        get: "/v1alpha1/{name=users/*/images/*}"
      }
      additional_bindings {
        get: "/v1alpha1/{name=organizations/*/images/*}"
      }
    };
  }

  rpc GetCdnImage(GetImageRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=hosts/*/parameters/**}"
    };
  }

  rpc CreateGallery(CreateGalleryRequest) returns (Gallery) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=galleries/*}"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{name=users/*/galleries/*}"
        body: "*"
      }
      additional_bindings {
        post: "/v1alpha1/{name=organizations/*/galleries/*}"
        body: "*"
      }
    };
  }

  rpc DeleteGallery(DeleteGalleryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=galleries/*}"
      additional_bindings {
        delete: "/v1alpha1/{name=users/*/galleries/*}"
      }
      additional_bindings {
        delete: "/v1alpha1/{name=organizations/*/galleries/*}"
      }
    };
  }
}

message Gallery {
  string name = 1;
}

// This is a private internal structure used to store metadata information
// about a specific image file. This structure is never exposed to the public.
message ImageRecord {
  // The image resource id.
  int64 id = 1;

  // A reference to a parent resource.
  oneof parent {
    // The gallery resource id. Example: `galleries/123`.
    int64 gallery = 2;

    // The organization resource id. Example: `organizations/456`.
    int64 organization = 3;

    // The user resource id. Example: `users/789`.
    int64 user = 4;
  }

  // The uri of the image file.
  // Example: gs://my-bucket/my-folder/my-image.jpeg
  string uri = 5;
}

// This is a private internal structure used to store metadata information
// about a specific gallery file. This structure is never exposed to the public.
message GalleryRecord {
  // The gallery resource id.
  int64 id = 1;

  // A reference to a parent resource.
  oneof parent {
    // The organization resource id. Example: `organizations/456`.
    int64 organization = 2;

    // The user resource id. Example: `users/789`.
    int64 user = 3;
  }

  // The database partition responsible for storing the images.
  int32 partition_index = 4;

  // Whether images should be available through the image search.
  bool enable_search_discovery = 6;

  // Whether images should be client-side encrypted.
  bool enable_client_encryption = 7;
}

message GetImageRequest {
  // The image resize bounds.
  message ResizeBounds {
    // The image width.
    int32 width = 1;
  
    // The image height.
    int32 height = 2;
  }

  // The image resource name.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  
  // If content type is set and differs from the original content type the image
  // will be converted to match the specified content type.
  //
  // Note: only "image/png", "image/webp", "image/jpeg" are supported values.
  string content_type = 2 [(google.api.field_behavior) = OPTIONAL];

  // The image bounding box to use for resizing. This value is normally used
  // to request image thumbnails. If both width and height are defined then the
  // value with smaller ratio will be used to resize the image. The resized
  // image has the closest standard ratio to the requested width or height.
  // If the requested ratio is larger than the original image it is ignored.
  ResizeBounds resize = 3 [(google.api.field_behavior) = OPTIONAL];

  // If require sensitive is set to true then images that contains only racy,
  // adult, violent or medical content will be returned, otherwise a "not found"
  // error will be returned instead.
  bool require_sensitive = 4 [(google.api.field_behavior) = OPTIONAL];
}

message UploadImageRequest {
  // Image content, represented as an HttpBody.
  google.api.HttpBody body = 1 [(google.api.field_behavior) = REQUIRED];

  // The image parent of the image. This value defaults to the user performing
  // the upload operation if no parent is set.
  string parent = 2 [(google.api.field_behavior) = REQUIRED];
}

message UploadImageResponse {
  // The image resource name.
  string name = 1;
}

message ImportImageRequest {
  // The WebCache options to be used when importing an image from a public
  // website address.
  message WebCacheOptions {
    // If refresh is set to true the image is imported from the remote address
    // regardless of an existing local cache, if the fetched image does not
    // match the existing cache the new image is stored and a new resource is
    // created, otherwise the existing (cached) resource is returned.
    bool refresh = 1;
  
    // If ignore is set to true no cache lookup is performed and the image is
    // imported into a new resource. If both "ignore" and "refresh" are set to
    // true then "refresh" has no effect.
    bool ignore = 2;
  }

  // The image parent of the image. This value defaults to the user performing
  // the import operation if no parent is set.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];
  
  // A publicly-accessible image HTTP/HTTPS URL. When fetching images from
  // HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
  // completed. Your request may fail if the specified host denies the
  // request (e.g. due to request throttling or DoS prevention), or if
  // Animeshon throttles requests to the site for abuse prevention. You should
  // not depend on externally-hosted images for production applications.
  string uri = 2 [(google.api.field_behavior) = REQUIRED];

  // The web cache options to apply to the import request.
  WebCacheOptions cache_options = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ImportImageResponse {
  // The image resource name.
  string name = 1;
}

message CreateGalleryRequest {
  string name = 1;
}

message DeleteGalleryRequest {
  string name = 1;
}