syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package animeshon.release.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/release/v1alpha1;release";
option java_package = "com.animeshon.release.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Release::v1Alpha1";

service Publisher {
  option (google.api.default_host) = "release.animeapis.com";

  rpc GetRelease(GetReleaseRequest) returns (Release) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/releases/*}"
    };
  }

  rpc ListReleases(ListReleasesRequest) returns (ListReleasesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=users/*}/releases"
    };
  }

  rpc CreateRelease(CreateReleaseRequest) returns (Release) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/releases"
      body: "*"
    };
  }

  rpc UpdateRelease(UpdateReleaseRequest) returns (Release) {
    option (google.api.http) = {
      patch: "/v1alpha1/{release.name=users/*/releases/*}"
      body: "*"
    };
  }

  // The release is soft-deleted and a grace period is granted before complete
  // deletion. During this grace period the release can be recovered.
  rpc DeleteRelease(DeleteReleaseRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*/releases/*}"
    };
  }

  // This method allows to recover a release while still in the grace period.
  rpc UndeleteRelease(UndeleteReleaseRequest) returns (Release) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*/releases/*}:undelete"
    };
  }

  // The release is marked as immediately available to the public.
  rpc PublishRelease(PublishReleaseRequest) returns (PublishReleaseResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/releases/*}:publish"
    };
  }

  // The release is scheduled to be released at a specific future date and time.
  rpc ScheduleRelease(ScheduleReleaseRequest) returns (ScheduleReleaseResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/releases/*}:schedule"
    };
  }

  // This method can only be called on scheduled releases. The scheduling is
  // cancelled and the release is marked as a draft.
  rpc CancelRelease(CancelReleaseRequest) returns (CancelReleaseResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/releases/*}:cancel"
    };
  }

  // This method can only be called on published releases marked as active. Any
  // non-authoritative release associated to the specified release will also be
  // automatically marked as suspended.
  rpc SuspendRelease(SuspendReleaseRequest) returns (SuspendReleaseResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/releases/*}:suspend"
    };
  }
}

message Release {
  enum State {
    // The default value. This value is used if the state is omitted.
    STATE_UNSPECIFIED = 0;

    // The release has been published and is available to the general public.
    ACTIVE = 1;

    // The release has been scheduled and will be made automatically available
    // to the public according to the scheduling conditions.
    SCHEDULED = 2;

    // The release is a draft and is still being worked on.
    DRAFT = 3;

    // The release has been suspended. This state might automatically being set
    // for non-authoritative releases when their authoritative release is also
    // suspended, unpublished, or deleted. This state might also be set when a
    // release is breaching general terms and conditions or is in conflict with
    // community guidelines or internal governing policies.
    SUSPENDED = 4;

    // The release has been marked for deletion.
    DELETED = 5;
  }

  // The release resource name.
  string name = 1;

  // The authoritative release is set only for sub-licensed releases that do not
  // hold any publishing rights on the content being distributed.
  //
  // A common case where the release is to be considered non-authoritative is
  // a translation released by third-parties. In such scenario the original
  // author(s) is to be considered the only publishing authority over the
  // content.
  //
  // If for any reason the authoritative release were to be unpublished or
  // deleted from Animeshon all associated non-authoritative releases will
  // be automatically hidden from public consumption and marked as suspended.
  string authoritative_release = 2;

  // The resource name of the associated release in the knowledge graph.
  string knowledge_graph = 3;

  // The current release state.
  State state = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp at which the release was created.
  google.protobuf.Timestamp create_time = 5
    [(google.api.field_behavior) = OUTPUT_ONLY];

  // The latest timestamp at which the release was updated.
  google.protobuf.Timestamp update_time = 6
    [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp at which the release was deleted.
  google.protobuf.Timestamp delete_time = 7
    [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetReleaseRequest {
  // The name of the release to retrieve.
  string name = 1;
}

message ListReleasesRequest {
  // The parent to list releases from.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // The value returned from the previous call.
  string page_token = 3;

  // A filter to be applied to results.
  string filter = 4;
}

message ListReleasesResponse {
  // The list of releases.
  repeated Release releases = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateReleaseRequest {
  // The parent this release belongs to.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // The release to create.
  Release release = 2;
}

message UpdateReleaseRequest {
  // The release to update.
  Release release = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteReleaseRequest {
  // The name of the release to delete.
  string name = 1;
}

message UndeleteReleaseRequest {
  // The name of the release to undelete.
  string name = 1;
}

message PublishReleaseRequest {
  // The name of the release to publish.
  string name = 1;
}

message PublishReleaseResponse {
}

message ScheduleReleaseRequest {
  // The name of the release to schedule.
  string name = 1;
}

message ScheduleReleaseResponse {
}

message CancelReleaseRequest {
  // The name of the release to cancel.
  string name = 1;
}

message CancelReleaseResponse {
}

message SuspendReleaseRequest {
  // The name of the release to suspend.
  string name = 1;

  // The reason why the release has been suspended.
  string reason = 2;
}

message SuspendReleaseResponse {
}
