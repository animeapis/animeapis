syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

package animeshon.tracker.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/tracker/v1alpha1;tracker";
option java_package = "com.animeshon.tracker.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Tracker::v1Alpha1";

service TrackerService {
  option (google.api.default_host) = "tracker.animeapis.com";

  rpc GetTracker(GetTrackerRequest) returns (Tracker) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/trackers/*/*}"
    };
  }
  
  rpc ListTrackers(ListTrackersRequest) returns (ListTrackersResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=users/*}/trackers"
    };
  }

  rpc CreateTracker(CreateTrackerRequest) returns (Tracker) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/trackers"
      body: "*"
    };
  }

  rpc UpdateTracker(UpdateTrackerRequest) returns (Tracker) {
    option (google.api.http) = {
      patch: "/v1alpha1/{tracker.name=users/*/trackers/*/*}"
      body: "*"
    };
  }

  rpc DeleteTracker(DeleteTrackerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*/trackers/*/*}"
      body: "*"
    };
  }

  // Only used for OAuth as we need to set up the flow
  rpc GetOAuthInfo(OAuthInfoRequest) returns (OAuthInfoResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=users/*}/trackers:authenticate"
    };
  }

  rpc SetAuth(SetAuthRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/trackers:authenticate"
      body: "*"
    };
  }

  rpc ImportTrackers(ImportTrackersRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/trackers:import"
      body: "*"
    };
  }

  rpc ExportTrackers(ExportTrackersRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/trackers:export"
      body: "*"
    };
  }
}

enum State {
  STATE_UNSPECIFIED = 0;

  // The consumption of the media is still in progress.
  STATE_IN_PROGRESS = 1;

  // The consumption of the media has been completed.
  STATE_COMPLETED = 2;

  // The consumption of the media is on hold.
  STATE_ON_HOLD = 3;
}

enum Provider{
  PROVIDER_UNSPECIFIED = 0;
  PROVIDER_MYANIMELIST  = 1;
  PROVIDER_MANGADEX  = 2;
  PROVIDER_ANILIST  = 3;
  PROVIDER_ANIDB  = 4;
  PROVIDER_MANGAUPDATES  = 5;
  PROVIDER_VNDB  = 6;
};

message Tracker {
  // The id of the tracker.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The content whose progress is being tracked.
  string item_name = 2 [(google.api.field_behavior) = REQUIRED];

  // The items that belong to the content, if any.
  repeated string subitem_names = 3;

  // When the progress started.
  google.protobuf.Timestamp start_time = 4;

  // When the progress ended.
  google.protobuf.Timestamp end_time = 5;

  // The percentage of progress from 0 to 100.
  // null means the percentage should be calculated based on the amount of
  // subitems in the item being tracked.
  google.protobuf.FloatValue progress_percentage = 6;

  // The progress state of the tracker.
  State state = 7;
}

message GetTrackerRequest {
  // The name of the tracker to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tracker.animeapis.com/Tracker"
    }
  ];
}

message ListTrackersRequest {
  // The user this tracker belongs to.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];

  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // The value returned from the previous call.
  string page_token = 3;

  // A filter to be applied to results.
  string filter = 4;
}

message ListTrackersResponse {
  // The list of trackers.
  repeated Tracker trackers = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateTrackerRequest {
  // The user this tracker belongs to.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];

  // The tracker to create.
  Tracker tracker = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tracker.animeapis.com/Tracker"
    }
  ];
}

message UpdateTrackerRequest {
  // The tracker to update.
  Tracker tracker = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteTrackerRequest {
  // The name of the tracker to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tracker.animeapis.com/Tracker"
    }
  ];
}

message OAuthInfoRequest {
  // The OAuth provider to get the auth info from
  Provider provider = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  // The user associated with the external provider
  string parent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
}

message OAuthInfoResponse {
    // The url to authenticate the user within the provider
    string url = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
    bool OAuthInfoResponse = 2;
}

message OAuth {
  // OAuth should reply with a code and a state,
  // this should compete the auth flow
  string code = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string state = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message PlainAuth {
  // The login info for websites that dont have API support
  string username = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string password = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message SetAuthRequest {
  // The Auth provider
  Provider provider = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string parent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
  // Providers either support OAuth or password/username, not both
  oneof auth {
    OAuth oauth = 3;
    PlainAuth plain_auth = 4;
  }
}

// Selecting what provider we want to import from
message ImportTrackersRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];

  Provider provider = 2;
}

// Selecting what provider we want to export to
message ExportTrackersRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];

  Provider provider = 2;
}