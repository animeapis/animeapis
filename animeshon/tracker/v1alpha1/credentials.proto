syntax = "proto3";

import "animeshon/tracker/v1alpha1/tracker.proto";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

package animeshon.tracker.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/tracker/v1alpha1;tracker";
option java_package = "com.animeshon.tracker.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Tracker::v1Alpha1";

service Credentials {
  option (google.api.default_host) = "tracker.animeapis.com";

  // Only used for OAuth as we need to set up the flow
  rpc GetOAuthInfo(OAuthInfoRequest) returns (OAuthInfoResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=users/*}/trackers:authenticate"
    };
  }

  rpc SetAuth(SetAuthRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*}/trackers:authenticate"
      body: "*"
    };
  }
}

message OAuth {
  // OAuth should reply with a code and a state,
  // this should compete the auth flow
  string code = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string state = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message PlainAuth {
  // The login info for websites that dont have API support
  string username = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string password = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message OAuthInfoRequest {
  // The OAuth provider to get the auth info from
  Provider provider = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  // The user associated with the external provider
  string parent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
}

message OAuthInfoResponse {
  // The url to authenticate the user within the provider
  string url = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  bool authenticated = 2;
}

message SetAuthRequest {
  // The Auth provider
  Provider provider = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string parent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
  // Providers either support OAuth or password/username, not both
  oneof auth {
    OAuth oauth = 3;
    PlainAuth plain_auth = 4;
  }
}
