syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package animeshon.crossrefs.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/crossrefs/v1alpha1;crossrefs";
option java_package = "com.animeshon.crossrefs.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::CrossRefs::v1Alpha1";

// TODO(christian-roggia): consider splitting the service into multiple
// services, each one responsible for a subgroup of resources such as
// universes, crossrefs, and parodies.

service Referrer {
  option (google.api.default_host) = "crossrefs.animeapis.com";

  rpc AnalyzeParodies(google.protobuf.Empty) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha1/parodies:analyze"
      body: "*"
    };
    option (google.longrunning.operation_info) = {
      response_type: "AnalyzeParodiesResponse"
      metadata_type: "OperationMetadata"
    };
  }

  rpc ExportParodies(google.protobuf.Empty) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha1/parodies:export"
      body: "*"
    };
    option (google.longrunning.operation_info) = {
      response_type: "ExportParodiesResponse"
      metadata_type: "OperationMetadata"
    };
  }
}

// Represents the metadata of the long-running operation.
message OperationMetadata {
  // Output only. The time the operation was created.
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time the operation finished running.
  google.protobuf.Timestamp end_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Server-defined resource path for the target of the operation.
  string target = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Name of the verb executed by the operation.
  string verb = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Human-readable status of the operation, if any.
  string status_message = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Identifies whether the user has requested cancellation
  // of the operation. Operations that have successfully been cancelled
  // have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
  // corresponding to `Code.CANCELLED`.
  bool requested_cancellation = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. API version used to start the operation.
  string api_version = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// TODO(christian-roggia): This is a workaround to solve the problem of GAPIC
// CLI being generated with broken code if google.protobuf.Empty is used
// in the response_type of longrunning operations.
message AnalyzeParodiesResponse {
}

message ExportParodiesResponse {
}
